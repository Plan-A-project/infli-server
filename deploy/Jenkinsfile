// stage names
def SET_VARIABLE = 'SET VARIABLE'
def GITHUB_CHECKOUT = 'GITHUB CHECKOUT'
def BUILD = 'BUILD'
def BUILD_PUSH_DOCKER_IMAGE = 'BUILD & PUSH DOCKER IMAGE'
def DEPLOY_TO_SERVER = 'DEPLOY TO SERVER'

pipeline {

    agent any

    environment {
        GPG_SECRET_KEY = credentials('GPG_SECRET_KEY')

        // EXTERNAL_PORT
        EXTERNAL_PORT_BLUE = credentials("EXTERNAL_PORT_BLUE")
        EXTERNAL_PORT_GREEN = credentials("EXTERNAL_PORT_GREEN")
        INTERNAL_PORT = credentials('INTERNAL_PORT')
        ENCRYPT_KEY = credentials('ENCRYPT_KEY')
    }

    stages {
        stage(SET_VARIABLE) {
            steps {
                echo 'Set Variables'
                script {

                    BASE_DIR = './deploy'

                    // OPERATION_ENV
                    OPERATION_ENV = env.BRANCH_NAME.equals('main') ? 'prod' : 'dev'

                    // DOCKER
                    DOCKER_IMAGE_NAME = env.BRANCH_NAME.equals('main') ? 'prod-infli' : 'dev-infli'

                    // SSH
                    SSH_CREDENTIAL_ID = env.BRANCH_NAME.equals('main') ? 'PROD_SSH' : 'DEV_SSH'
                    SSH_HOST_CREDENTIAL_ID = env.BRANCH_NAME.equals('main') ? 'PROD_SSH_HOST' : 'DEV_SSH_HOST'
                    SSH_PORT_CREDENTIAL_ID = env.BRANCH_NAME.equals('main') ? 'PROD_SSH_PORT' : 'DEV_SSH_PORT'

                    // DISCORD
                    DISCORD_TITLE = 'INFLI BACKEND JENKINS JOB'
                    DISCORD_WEB_HOOK = env.BRANCH_NAME.equals('main') ? 'PROD_DISCORD_WEB_HOOK' : 'DEVELOP_DISCORD_WEB_HOOK'
                }

            }
            post {
                success {
                    sendDiscordStart()
                }
            }
        }

        stage(GITHUB_CHECKOUT) {
            steps {
                echo 'Checkout Remote Repository'
                git branch: "${env.BRANCH_NAME}",
                url: 'https://github.com/Plan-A-project/infli-server.git'
            }
            post {
                success {
                    sendDiscordSuccess(GITHUB_CHECKOUT)
                }
                failure {
                    sendDiscordFailed(GITHUB_CHECKOUT)
                }
            }
        }

        stage(BUILD) {

            steps {
                echo 'Build With gradlew'
                // TODO: 테스트 추후 추가
                sh '''
                    ./gradlew clean build -x test
                '''
            }
            post {
                success {
                    sendDiscordSuccess(BUILD)
                }
                failure {
                    sendDiscordFailed(BUILD)
                }
            }
        }

        stage(BUILD_PUSH_DOCKER_IMAGE) {
            steps {
                echo 'Build & Push Docker Image'
                withCredentials([usernamePassword(
                        credentialsId: 'DOCKER_HUB_CREDENTIAL',
                        usernameVariable: 'DOCKER_HUB_ID',
                        passwordVariable: 'DOCKER_HUB_PW')]) {

                    script {
                        docker.withRegistry('https://registry.hub.docker.com',
                                            'DOCKER_HUB_CREDENTIAL') {
                        app = docker.build("${DOCKER_HUB_ID}/${DOCKER_IMAGE_NAME}", "-f ${BASE_DIR}/Dockerfile .")
                        app.push("${env.BUILD_ID}")
                        app.push('latest')
                        }
                    }
                    sh(script: """
                        docker rmi \$(docker images -q \
                        --filter \"before=${DOCKER_HUB_ID}/${DOCKER_IMAGE_NAME}:latest\" \
                        registry.hub.docker.com/${DOCKER_HUB_ID}/${DOCKER_IMAGE_NAME})
                    """, returnStatus: true)
                }
            }
            post {
                success {
                    sendDiscordSuccess(BUILD_PUSH_DOCKER_IMAGE)
                }
                failure {
                    sendDiscordFailed(BUILD_PUSH_DOCKER_IMAGE)
                }
            }
        }

        stage(DEPLOY_TO_SERVER) {
            steps {
                echo 'Deploy to Server'
                withCredentials([
                    usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIAL',
                                        usernameVariable: 'DOCKER_HUB_ID',
                                        passwordVariable: 'DOCKER_HUB_PW'),
                    sshUserPrivateKey(credentialsId: "${SSH_CREDENTIAL_ID}",
                                        keyFileVariable: 'KEY_FILE',
                                        passphraseVariable: 'PW',
                                        usernameVariable: 'USERNAME'),
                    string(credentialsId: "${SSH_HOST_CREDENTIAL_ID}", variable: 'HOST'),
                    string(credentialsId: "${SSH_PORT_CREDENTIAL_ID}", variable: 'PORT')]) {

                    script {
                        def remote = [:]
                        remote.name = OPERATION_ENV
                        remote.host = HOST
                        remote.user = USERNAME
                        remote.password = PW
                        remote.port = PORT as Integer
                        remote.allowAnyHosts = true

                        sshCommand remote: remote, command:
                            'docker pull ' + DOCKER_HUB_ID + "/" + DOCKER_IMAGE_NAME + ":latest"

                        sshPut remote: remote, from: "${BASE_DIR}/deploy.sh", into: '.'
                        sshPut remote: remote, from: "${BASE_DIR}/nginx.conf", into: '.'

                        sshCommand remote: remote, command:
                            ('export OPERATION_ENV=' + OPERATION_ENV + ' && '
                            + 'export INTERNAL_PORT=' + INTERNAL_PORT + ' && '
                            + 'export EXTERNAL_PORT_GREEN=' + EXTERNAL_PORT_GREEN + ' && '
                            + 'export EXTERNAL_PORT_BLUE=' + EXTERNAL_PORT_BLUE + ' && '
                            + 'export DOCKER_IMAGE_NAME=' + DOCKER_HUB_ID + '/' + DOCKER_IMAGE_NAME + ' && '
                            + 'export ENCRYPT_KEY=' + ENCRYPT_KEY + ' && '
                            + 'chmod +x deploy.sh && '
                            + './deploy.sh')
                    }
                }
            }
            post {
                success {
                    sendDiscordSuccess(DEPLOY_TO_SERVER)
                }
                failure {
                    sendDiscordFailed(DEPLOY_TO_SERVER)
                }
            }
        }

    }
}

void sendDiscordStart() {
    withCredentials([string(credentialsId: "${DISCORD_WEB_HOOK}", variable: 'WEB_HOOK')]) {
        discordSend (
                title: DISCORD_TITLE,
                description: "${OPERATION_ENV} 환경 배포 파이프 라인 시작",
                footer: "===============================================================\n" +
                        "\n" +
                        "배포 파이프라인이 시작되었습니다.\n" +
                        "${env.JOB_NAME}(#${env.BUILD_NUMBER})\n",
                link: env.BUILD_URL,
                result: currentBuild.currentResult,
                webhookURL: WEB_HOOK
        )
    }
}

void sendDiscordSuccess(String stage) {
    withCredentials([string(credentialsId: "${DISCORD_WEB_HOOK}", variable: 'WEB_HOOK')]) {
        discordSend (
                title: DISCORD_TITLE,
                description: stage,
                footer: stage + "를 성공했습니다.",
                result: currentBuild.currentResult,
                webhookURL: WEB_HOOK
        )
    }
}

void sendDiscordFailed(String stage) {
    withCredentials([string(credentialsId: "${DISCORD_WEB_HOOK}", variable: 'WEB_HOOK')]) {
        discordSend (
                title: DISCORD_TITLE,
                description: stage,
                footer: stage + "를 실패했습니다.\n" +
                        "===============================================================\n",
                result: currentBuild.currentResult,
                webhookURL: WEB_HOOK
        )
    }
    echo stage + " Failed"
}
